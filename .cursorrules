# Health 3.0 项目开发规范

## 1. 项目结构规范
```
health3.0/
├── frontend/           # 前端项目目录
│   ├── src/           # 源代码
│   ├── public/        # 静态资源
│   └── tests/         # 测试文件
├── backend/           # 后端项目目录
│   ├── app/          # 应用代码
│   ├── tests/        # 测试文件
│   └── data/         # 数据处理
├── docs/             # 文档目录
└── public/           # 数据文件目录
```

## 2. 命名规范
### 文件命名
- 前端组件文件：PascalCase.tsx
- 工具函数文件：camelCase.ts
- 样式文件：camelCase.module.css
- 后端模块文件：snake_case.py
- 测试文件：name_test.py 或 name.test.tsx

### 变量命名
- TypeScript/JavaScript：camelCase
- Python：snake_case
- 常量：UPPER_SNAKE_CASE
- 类名：PascalCase

## 3. 开发流程规范
### 需求对齐
1. 每个功能开发前必须对照PRD确认需求
2. 功能实现必须完全覆盖PRD中的描述
3. 如有疑问必须及时沟通确认

### 代码提交
1. 提交前必须完成自测
2. 提交信息必须符合规范
3. 每次提交必须更新开发进度记录

## 4. 数据处理规范
### CSV文件处理
1. 原始数据只读，不得修改
2. 数据处理过程必须可追溯
3. 必须进行数据验证和清洗

### 数据分析
1. 严格遵循PRD中定义的分析维度
2. 分析结果必须可复现
3. 必须包含数据来源说明

## 5. 接口规范
### API设计
1. 遵循RESTful设计原则
2. 统一错误处理机制
3. 必须包含完整的参数验证

### 响应格式
```typescript
{
  code: number,      // 状态码
  data: any,        // 响应数据
  message: string,  // 提示信息
  timestamp: number // 时间戳
}
```

## 6. 前端开发规范
### 组件开发
1. 使用函数式组件
2. Props必须定义类型
3. 必须处理加载和错误状态

### 状态管理
1. 使用React Context和SWR
2. 避免过度使用全局状态
3. 保持状态最小化

## 7. 后端开发规范
### 代码组织
1. 遵循FastAPI最佳实践
2. 使用依赖注入
3. 模块职责单一

### 数据库操作
1. 使用SQLAlchemy ORM
2. 必须进行事务管理
3. 优化查询性能

## 8. 测试规范
### 测试覆盖
1. 前端组件测试覆盖率 > 80%
2. 后端代码测试覆盖率 > 85%
3. 必须包含端到端测试

### 测试用例
1. 测试用例必须完整描述
2. 必须覆盖边界条件
3. 必须包含正向和反向测试

## 9. 文档规范
### 代码注释
1. 函数必须包含文档字符串
2. 复杂逻辑必须注释说明
3. 关键算法必须说明原理

### 项目文档
1. README必须及时更新
2. API文档必须同步修改
3. 开发进度必须及时记录

## 10. 性能规范
### 前端性能
1. 首屏加载时间 < 2s
2. 页面交互响应 < 100ms
3. 必须进行代码分割

### 后端性能
1. API响应时间 < 1s
2. 数据处理时间可控
3. 必须实现适当缓存

## 11. 安全规范
1. 本地数据必须安全存储
2. 敏感信息必须脱敏处理
3. 必须进行输入验证 

## 12. 版本控制规范
### 版本号管理
1. 版本号格式：v{major}.{minor}.{patch}
2. 主版本号(major)：重大功能更新或架构调整
3. 次版本号(minor)：功能模块完成或重要更新
4. 修订号(patch)：bug修复和小改动

### 提交规范
1. 提交信息格式：
   ```
   <type>(<scope>): <subject>

   <body>

   <footer>
   ```
   - type: feat/fix/docs/style/refactor/test/chore
   - scope: 影响范围
   - subject: 简短描述
   - body: 详细说明
   - footer: 关联issue等

2. 分支管理：
   - main: 主分支，稳定版本
   - develop: 开发分支
   - feature/*: 功能分支
   - bugfix/*: 修复分支
   - release/*: 发布分支

### 版本控制过滤
1. 忽略文件规则：
   ```gitignore
   # 开发环境
   .venv/
   node_modules/
   __pycache__/
   .pytest_cache/
   .coverage/
   
   # IDE相关
   .vscode/
   .idea/
   *.swp
   .DS_Store
   
   # 构建输出
   dist/
   build/
   .next/
   
   # 临时文件
   tmp/
   temp/
   *.log
   *.tmp
   
   # 本地配置
   .env.local
   .env.*.local
   ```

2. 必须版本控制的文件：
   ```
   # 核心配置和文档
   - .gitignore
   - .cursorrules
   - docs/DEVLOG.md
   - docs/PRD.md
   - alembic/versions/*
   - src/database/schemas/*
   - tests/**/*
   
   # 项目配置文件
   - package.json
   - pyproject.toml
   - tsconfig.json
   - next.config.js
   - tailwind.config.js
   ```

### 回滚规范
1. 回滚前准备：
   - 确认目标版本完整性
   - 验证依赖项兼容性
   - 备份当前数据
   - 记录当前配置

2. 回滚流程：
   - 导出当前数据库结构
   - 保存当前配置文件
   - 切换到目标版本
   - 恢复对应环境

3. 回滚后验证：
   - 验证代码完整性
   - 检查数据一致性
   - 测试核心功能
   - 更新开发日志

### 数据管理规范
1. 数据文件规则：
   - 原始数据文件只读
   - 处理后数据分目录存储
   - 分析结果单独存放
   - 定期清理临时数据

2. 数据库版本：
   - 使用Alembic管理迁移
   - 记录每次Schema变更
   - 保持迁移脚本可回滚
   - 验证数据一致性

3. 依赖版本：
   - 锁定依赖包版本号
   - 记录第三方服务版本
   - 保存环境配置快照
   - 定期更新依赖包

## 13. 开发环境规范
### IDE配置
1. 使用Cursor进行开发
2. 启用代码格式化
3. 配置代码检查工具
4. 保持工作区清洁

### 测试环境
1. 本地测试环境配置：
   - Node.js v18+
   - Python 3.10+
   - SQLite数据库
   - Poetry包管理

2. 测试框架配置：
   - Jest for Frontend
   - Pytest for Backend
   - Cypress for E2E

### 部署环境
1. 本地部署要求：
   - macOS系统
   - 局域网访问配置
   - 数据备份机制
   - 日志记录系统